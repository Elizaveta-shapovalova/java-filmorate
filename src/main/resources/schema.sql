CREATE ALIAS IF NOT EXISTS getDate AS
'java.util.Date getDate() {
    return new java.util.Date();
}';

CREATE TABLE IF NOT EXISTS users (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar NOT NULL UNIQUE,
    login varchar NOT NULL UNIQUE,
    name varchar,
    birthday date,
    CONSTRAINT constraint_login
        CHECK (login NOT LIKE '% %' AND login NOT LIKE ' '),
    CONSTRAINT constraint_email
        check (email like '%@%'),
    CONSTRAINT constraint_birthday
            CHECK (CAST(birthday AS date) <= CAST(getDate() as date))


);

CREATE TABLE IF NOT EXISTS follow (
    PRIMARY KEY (user_id, friend_id),
    user_id integer NOT NULL REFERENCES users (id),
    friend_id integer NOT NULL REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS genre (
    id integer PRIMARY KEY,
    name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS MPA (
    id integer NOT NULL PRIMARY KEY,
    name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS movie (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL,
    description varchar(200),
    release_date date NOT NULL,
    duration integer NOT NULL,
    rate integer NOT NULL,
    mpa_id integer REFERENCES MPA (id),
    CONSTRAINT constraint_release_date
    check (release_date > '1895-12-27'),
    CONSTRAINT "movie_mpa_id" FOREIGN KEY (mpa_id) REFERENCES mpa (id)

);

CREATE TABLE IF NOT EXISTS film_genre (
    PRIMARY KEY (film_id, genre_id),
    film_id integer NOT NULL REFERENCES movie (id),
    genre_id integer NOT NULL REFERENCES genre (id)
);


CREATE TABLE IF NOT EXISTS likes (
    PRIMARY KEY (film_id, user_id),
    film_id integer NOT NULL REFERENCES movie (id),
    user_id integer NOT NULL REFERENCES users (id)
);
