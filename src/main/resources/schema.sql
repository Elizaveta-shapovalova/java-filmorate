CREATE ALIAS IF NOT EXISTS getDate AS
'java.util.Date getDate() {
    return new java.util.Date();
}';

CREATE TABLE IF NOT EXISTS users
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR UNIQUE NOT NULL,
    login    VARCHAR UNIQUE NOT NULL,
    name     VARCHAR,
    birthday DATE,
    CONSTRAINT login_check
        CHECK (login NOT LIKE '% %' and login NOT LIKE ''),
    CONSTRAINT email_at
        CHECK (email LIKE '%@%'),
    CONSTRAINT birthday_check
        CHECK (CAST(birthday AS date) <= CAST(getDate() as date))
);

CREATE TABLE IF NOT EXISTS follow
(
    user_id   BIGINT NOT NULL,
    friend_id BIGINT NOT NULL,
    CONSTRAINT fk_follow_user_id
        FOREIGN KEY (user_id)
            REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_follow_friend_id
        FOREIGN KEY (friend_id)
            REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS genre
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS MPA
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS movie
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR NOT NULL,
    description  VARCHAR(200),
    release_date DATE    NOT NULL,
    duration     BIGINT  NOT NULL,
    rate         BIGINT  NOT NULL,
    mpa_id       BIGINT,
    CONSTRAINT m_name_check
        CHECK (name NOT LIKE ''),
    CONSTRAINT release_date_check
        CHECK (release_date >= CAST('1895-12-28' AS date)),
    CONSTRAINT positive_duration
        CHECK (duration > 0),
    CONSTRAINT fk_film_mpa
        FOREIGN KEY (mpa_id)
            REFERENCES mpa (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  BIGINT NOT NULL,
    genre_id BIGINT NOT NULL,
    CONSTRAINT fk_film_genre_film_id
        FOREIGN KEY (film_id)
            REFERENCES movie (id) ON DELETE CASCADE,
    CONSTRAINT fk_genre_name_id
        FOREIGN KEY (genre_id)
            REFERENCES genre (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    CONSTRAINT fk_like_film_id
        FOREIGN KEY (film_id)
            REFERENCES movie (id) ON DELETE CASCADE,
    CONSTRAINT fk_like_user_id
        FOREIGN KEY (user_id)
            REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS directors
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    CONSTRAINT d_name_check
        CHECK (name NOT LIKE '')
);

CREATE TABLE IF NOT EXISTS film_director
(
    film_id     BIGINT NOT NULL REFERENCES movie (id) ON DELETE CASCADE,
    director_id BIGINT NOT NULL REFERENCES directors (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS reviews
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     Text    NOT NULL,
    is_positive BOOLEAN NOT NULL,
    film_id     BIGINT REFERENCES movie (id) ON DELETE CASCADE,
    user_id     BIGINT REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_like
(
    review_id   BIGINT REFERENCES reviews (id) ON DELETE CASCADE,
    user_id     BIGINT REFERENCES users (id) ON DELETE CASCADE,
    is_positive BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS feed
(
    event_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    creation_time BIGINT  NOT NULL,
    user_id       BIGINT  NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    event_type    VARCHAR NOT NULL,
    operation     VARCHAR NOT NULL,
    entity_id     BIGINT  NOT NULL
);
